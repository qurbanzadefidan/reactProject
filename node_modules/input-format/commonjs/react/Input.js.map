{"version":3,"sources":["../../source/react/Input.js"],"names":["Input","ref","value","parse","format","InputComponent","inputComponent","onChange","onKeyDown","rest","ownRef","_onChange","event","current","_onKeyDown","isEmptyValue","text","React","forwardRef","propTypes","PropTypes","func","isRequired","elementType","type","string","onCut","onPaste","defaultProps","undefined"],"mappings":";;;;;;;;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,OAQGC,GARH,EAQQ;AAAA,MAPPC,KAOO,QAPPA,KAOO;AAAA,MANPC,KAMO,QANPA,KAMO;AAAA,MALPC,MAKO,QALPA,MAKO;AAAA,MAJSC,cAIT,QAJPC,cAIO;AAAA,MAHPC,QAGO,QAHPA,QAGO;AAAA,MAFPC,SAEO,QAFPA,SAEO;AAAA,MADJC,IACI;;AACP,MAAMC,MAAM,GAAG,oBAAf;AACAT,EAAAA,GAAG,GAAGA,GAAG,IAAIS,MAAb;;AACA,MAAMC,SAAS,GAAG,wBAAY,UAACC,KAAD,EAAW;AACxC,WAAO,4BACNA,KADM,EAENX,GAAG,CAACY,OAFE,EAGNV,KAHM,EAINC,MAJM,EAKNG,QALM,CAAP;AAOA,GARiB,EAQf,CAACN,GAAD,EAAME,KAAN,EAAaC,MAAb,EAAqBG,QAArB,CARe,CAAlB;;AAUA,MAAMO,UAAU,GAAG,wBAAY,UAACF,KAAD,EAAW;AACzC,QAAIJ,SAAJ,EAAe;AACdA,MAAAA,SAAS,CAACI,KAAD,CAAT;AACA;;AACD,WAAO,6BACNA,KADM,EAENX,GAAG,CAACY,OAFE,EAGNV,KAHM,EAINC,MAJM,EAKNG,QALM,CAAP;AAOA,GAXkB,EAWhB,CAACN,GAAD,EAAME,KAAN,EAAaC,MAAb,EAAqBG,QAArB,EAA+BC,SAA/B,CAXgB,CAAnB;;AAaA,SACC,gCAAC,cAAD,eACKC,IADL;AAEC,IAAA,GAAG,EAAER,GAFN;AAGC,IAAA,KAAK,EAAEG,MAAM,CAACW,YAAY,CAACb,KAAD,CAAZ,GAAsB,EAAtB,GAA2BA,KAA5B,CAAN,CAAyCc,IAHjD;AAIC,IAAA,SAAS,EAAEF,UAJZ;AAKC,IAAA,QAAQ,EAAEH;AALX,KADD;AAQA;;AAEDX,KAAK,GAAGiB,kBAAMC,UAAN,CAAiBlB,KAAjB,CAAR;AAEAA,KAAK,CAACmB,SAAN,GAAkB;AACjB;AACAhB,EAAAA,KAAK,EAAEiB,sBAAUC,IAAV,CAAeC,UAFL;AAIjB;AACAlB,EAAAA,MAAM,EAAEgB,sBAAUC,IAAV,CAAeC,UALN;AAOjB;AACAhB,EAAAA,cAAc,EAAEc,sBAAUG,WAAV,CAAsBD,UARrB;AAUjB;AACAE,EAAAA,IAAI,EAAEJ,sBAAUK,MAAV,CAAiBH,UAXN;AAajB;AACApB,EAAAA,KAAK,EAAEkB,sBAAUK,MAdA;AAgBjB;AACAlB,EAAAA,QAAQ,EAAEa,sBAAUC,IAAV,CAAeC,UAjBR;AAmBjB;AACAd,EAAAA,SAAS,EAAEY,sBAAUC,IApBJ;AAqBjBK,EAAAA,KAAK,EAAEN,sBAAUC,IArBA;AAsBjBM,EAAAA,OAAO,EAAEP,sBAAUC;AAtBF,CAAlB;AAyBArB,KAAK,CAAC4B,YAAN,GAAqB;AACpB;AACAtB,EAAAA,cAAc,EAAE,OAFI;AAIpB;AACAkB,EAAAA,IAAI,EAAE;AALc,CAArB;eAQexB,K;;;AAEf,SAASe,YAAT,CAAsBb,KAAtB,EAA6B;AAC5B,SAAOA,KAAK,KAAK2B,SAAV,IAAuB3B,KAAK,KAAK,IAAxC;AACA","sourcesContent":["// This is just `./ReactInput.js` rewritten in Hooks.\r\n\r\nimport React, { useCallback, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n\tonChange as onInputChange,\r\n\tonKeyDown as onInputKeyDown\r\n} from '../input control'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nfunction Input({\r\n\tvalue,\r\n\tparse,\r\n\tformat,\r\n\tinputComponent: InputComponent,\r\n\tonChange,\r\n\tonKeyDown,\r\n\t...rest\r\n}, ref) {\r\n\tconst ownRef = useRef()\r\n\tref = ref || ownRef\r\n\tconst _onChange = useCallback((event) => {\r\n\t\treturn onInputChange(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\treturn onInputKeyDown(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange, onKeyDown])\r\n\r\n\treturn (\r\n\t\t<InputComponent\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tvalue={format(isEmptyValue(value) ? '' : value).text}\r\n\t\t\tonKeyDown={_onKeyDown}\r\n\t\t\tonChange={_onChange}/>\r\n\t)\r\n}\r\n\r\nInput = React.forwardRef(Input)\r\n\r\nInput.propTypes = {\r\n\t// Parses a single characher of `<input/>` text.\r\n\tparse: PropTypes.func.isRequired,\r\n\r\n\t// Formats `value` into `<input/>` text.\r\n\tformat: PropTypes.func.isRequired,\r\n\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: PropTypes.string.isRequired,\r\n\r\n\t// Is parsed from <input/> text.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// This handler is called each time `<input/>` text is changed.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// Passthrough\r\n\tonKeyDown: PropTypes.func,\r\n\tonCut: PropTypes.func,\r\n\tonPaste: PropTypes.func\r\n}\r\n\r\nInput.defaultProps = {\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: 'input',\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: 'text'\r\n}\r\n\r\nexport default Input\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === undefined || value === null\r\n}"],"file":"Input.js"}